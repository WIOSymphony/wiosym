"id"	"pz2112281422"
"file_path"	"data_raw\reg\pres\pol\nasa\pz2112281422"
"local_path"	"M:\proj\marin\swoc\work\wiosym"
"download_date"	"2021-12-28"
"user"	"pz"
"provider_list"	"nasa"
"provider_manual"	""
"source"	"https://doi.org/10.5067/MODIS/MOD09GA.006, http://drr.ikcest.org/static/upload/c2/c233934a-bbdb-11e8-b94f-00163e0618d6.pdf"
"citation"	""
"copyright"	"Open - product and raw data can be downloaded"
"copyright_details"	""
"location"	"reg"
"theme"	"Pressures (e.g. noise)"
"theme_tag"	"pres"
"subtheme"	"POLLUTION"
"subtheme_tag"	"pol"
"tags"	";pres;pollution;"
"comments"	"total suspened matter (mg/l) PZ processed in Google Earth Engine

// A function to mask out pixels that did not have observations.
var maskEmptyPixels = function(image) {
  // Find pixels that had observations.
  var withObs = image.select('num_observations_1km').gt(0)
  return image.updateMask(withObs)
}

// A function to mask out cloudy pixels.
var maskClouds = function(image) {
  // Select the QA band.
  var QA = image.select('state_1km')
  // Make a mask to get bit 10, the internal_cloud_algorithm_flag bit.
  var bitMask = 1 << 10;
  // Return an image masking out cloudy areas.
  return image.updateMask(QA.bitwiseAnd(bitMask).eq(0))
}

// Start with an image collection for a 1 month period.
// and mask out areas that were not observed.
var collection = ee.ImageCollection('MODIS/006/MOD09GA')
        .filterDate('2020-01-01', '2021-12-31')
        .map(maskEmptyPixels)

// Get the total number of potential observations for the time interval.
var totalObsCount = collection
        .select('num_observations_1km')
        .count()

// Map the cloud masking function over the collection.
var collectionCloudMasked = collection.map(maskClouds)
print (collectionCloudMasked)
// Get the total number of observations for non-cloudy pixels for the time
// interval.  The result is unmasked to set to unity so that all locations
// have counts, and the ratios later computed have values everywhere.
var clearObsCount = collectionCloudMasked
        .select('num_observations_1km')
        .count()
        .unmask(0)
var roi = ee.FeatureCollection(aoi).geometry();
var modis_b1 = collectionCloudMasked.select('sur_refl_b01');
var Band1 = modis_b1.reduce(ee.Reducer.median(), (14)).clip(roi)
print(modis_b1);
print(Band1);
//Applied turbidity measurement equation from http://drr.ikcest.org/static/upload/c2/c233934a-bbdb-11e8-b94f-00163e0618d6.pdf
var SPM = Band1.expression( '-1.91*(1140.25*(b1))/10000', 
   {'b1': Band1.select('sur_refl_b01_median'),});

print(SPM);
//Map.addLayer(
   // collectionCloudMasked.median(),
   // {bands: ['sur_refl_b01'],
   //  gain: 0.07,
    // gamma: 3
    //},
  //  'median of masked collection'
 // );

Map.addLayer(SPM,
    {bands: ['constant'],
     gain: 1,
     gamma: 3
    },
    'Total suspended Matter (mg/l)'
  );

 Export.image.toDrive({
  image : SPM.clip(roi),
  description: 'Total suspended Matter (mg/l)',
  maxPixels: 3784216672400,
  });  
   "
