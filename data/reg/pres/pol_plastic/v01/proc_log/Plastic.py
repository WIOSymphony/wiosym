# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2022-06-19 13:20:33
"""
import arcpy
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.sa import *

def Plastic():  # Plastic

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")

    # Model Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb"):
        v1_total_mean_velocity_norm_int_tif = arcpy.Raster("v1_total_mean_velocity_norm_int.tif")
        grid_1km_v01_1_tif = arcpy.Raster("grid_1km_v01.1.tif")
        Meijer2021_midpoint_em_PointToRas_1km1_tif = arcpy.Raster("Meijer2021_midpoint_em_PointToRas_1km1.tif")
        proc = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\proc"
        v1_flow_acc_pres_norm_int1_tif = arcpy.Raster("v1_flow_acc_pres_norm_int1.tif")

        # Process: Focal Statistics (2) (Focal Statistics) (sa)
        current_focal_plastic_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\proc\\current__focal_plastic.tif"
        Focal_Statistics_2_ = current_focal_plastic_tif
        current_focal_plastic_tif = arcpy.sa.FocalStatistics(in_raster=v1_total_mean_velocity_norm_int_tif, neighborhood="Wedge 50 0 360 CELL", statistics_type="SUM", ignore_nodata="DATA", percentile_value=90)
        current_focal_plastic_tif.save(Focal_Statistics_2_)


        # Process: Raster Calculator (4) (Raster Calculator) (ia)
        current_norm_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\proc\\current_norm.tif"
        Raster_Calculator_4_ = current_norm_tif
        current_norm_tif =  ((current_focal_plastic_tif-current_focal_plastic_tif.minimum)/(current_focal_plastic_tif.maximum- current_focal_plastic_tif.minimum))*100
        current_norm_tif.save(Raster_Calculator_4_)


        # Process: Raster Calculator (Raster Calculator) (ia)
        plastic_density_X10_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\proc\\plastic_density_X10.tif"
        Raster_Calculator = plastic_density_X10_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb"):
            plastic_density_X10_tif =  Meijer2021_midpoint_em_PointToRas_1km1_tif *10
            plastic_density_X10_tif.save(Raster_Calculator)


        # Process: Focal Statistics (Focal Statistics) (ia)
        plastic_density_combine_grid_focal_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\proc\\plastic_density_combine_grid_focal.tif"
        Focal_Statistics = plastic_density_combine_grid_focal_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb"):
            plastic_density_combine_grid_focal_tif = arcpy.ia.FocalStatistics(in_raster=plastic_density_X10_tif, neighborhood="Wedge 40 0 360 CELL", statistics_type="SUM", ignore_nodata="DATA", percentile_value=90)
            plastic_density_combine_grid_focal_tif.save(Focal_Statistics)


        # Process: Mosaic To New Raster (Mosaic To New Raster) (management)
        with arcpy.EnvManager(pyramid="PYRAMIDS -1 NEAREST LZ77 75 NO_SKIP NO_SIPS", scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb"):
            plastic_density_combine_grid_tif = arcpy.management.MosaicToNewRaster(input_rasters=[grid_1km_v01_1_tif, plastic_density_combine_grid_focal_tif], output_location=proc, raster_dataset_name_with_extension="plastic_density_combine_grid.tif", coordinate_system_for_the_raster="PROJCS[\"WGS_1984_Cylindrical_Equal_Area\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Cylindrical_Equal_Area\"],PARAMETER[\"false_easting\",0.0],PARAMETER[\"false_northing\",0.0],PARAMETER[\"central_meridian\",12.0],PARAMETER[\"standard_parallel_1\",-12.0],UNIT[\"Meter\",1.0]]", pixel_type="32_BIT_UNSIGNED", cellsize=None, number_of_bands=1, mosaic_method="SUM", mosaic_colormap_mode="FIRST")[0]
            plastic_density_combine_grid_tif = arcpy.Raster(plastic_density_combine_grid_tif)

        # Process: Extract by Mask (Extract by Mask) (sa)
        Plastic_density_landbase_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\proc\\Plastic_density_landbase.tif"
        Extract_by_Mask = Plastic_density_landbase_tif
        with arcpy.EnvManager(cellSize=r"M:\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", mask="grid_1km_v01.1.tif", outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]", 
                              scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb", snapRaster="grid_1km_v01.1.tif", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb"):
            Plastic_density_landbase_tif = arcpy.sa.ExtractByMask(in_raster=plastic_density_combine_grid_tif, in_mask_data=grid_1km_v01_1_tif)
            Plastic_density_landbase_tif.save(Extract_by_Mask)


        # Process: Raster Calculator (2) (Raster Calculator) (ia)
        plastic_density_combine_grid_log10_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\proc\\plastic_density_combine_grid_log10.tif"
        Raster_Calculator_2_ = plastic_density_combine_grid_log10_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb"):
            plastic_density_combine_grid_log10_tif =  Log10(Plastic_density_landbase_tif)
            plastic_density_combine_grid_log10_tif.save(Raster_Calculator_2_)


        # Process: Raster Calculator (3) (Raster Calculator) (sa)
        Plastic_lb_norm_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\proc\\Plastic_lb_norm.tif"
        Raster_Calculator_3_ = Plastic_lb_norm_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb"):
            Plastic_lb_norm_tif = ((plastic_density_combine_grid_log10_tif- plastic_density_combine_grid_log10_tif.minimum)/(plastic_density_combine_grid_log10_tif.maximum- plastic_density_combine_grid_log10_tif.minimum))*100
            Plastic_lb_norm_tif.save(Raster_Calculator_3_)


        # Process: Weighted Sum (Weighted Sum) (ia)
        plastic_relative_weighted_current_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\proc\\plastic_relative_weighted_current.tif"
        Weighted_Sum = plastic_relative_weighted_current_tif
        with arcpy.EnvManager(cellSize=r"M:\proj\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", mask="grid_1km_v01.1.tif", outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]", 
                              scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb", snapRaster="grid_1km_v01.1.tif", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\pol_plastic\v01\proc\plastic\Default.gdb"):
            plastic_relative_weighted_current_tif = arcpy.ia.WeightedSum(in_rasters=[[Plastic_lb_norm_tif, "VALUE", 80], [v1_total_mean_velocity_norm_int_tif, "Value", 13], [v1_flow_acc_pres_norm_int1_tif, "Value", 7]])
            plastic_relative_weighted_current_tif.save(Weighted_Sum)


        # Process: Raster Calculator (5) (Raster Calculator) (ia)
        Plastic_relative_norm_v01_0_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\pol_plastic\\v01\\Plastic_relative_norm_v01.0.tif"
        Raster_Calculator_5_ = Plastic_relative_norm_v01_0_tif
        with arcpy.EnvManager(cellSize=r"M:\proj\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", mask="grid_1km_v01.1.tif", outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]", 
                              snapRaster="grid_1km_v01.1.tif"):
            Plastic_relative_norm_v01_0_tif =  ((plastic_relative_weighted_current_tif-plastic_relative_weighted_current_tif.minimum)/(plastic_relative_weighted_current_tif.maximum - plastic_relative_weighted_current_tif.minimum))*100
            Plastic_relative_norm_v01_0_tif.save(Raster_Calculator_5_)


if __name__ == '__main__':
    Plastic()
