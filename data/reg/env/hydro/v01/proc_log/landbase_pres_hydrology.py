# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2022-06-17 19:26:43
"""
import arcpy
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.ia import *
from arcpy.sa import *
from arcpy.sa import *

def landbase_pres_hydrology():  # landbase_pres_hydrology

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")

    # Model Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
        geo_shallow_softb_1km_v01_0_tif = arcpy.Raster("geo_shallow_softb_1km_v01.0.tif")
        geo_shelf_rockyb_1km_v01_0_tif = arcpy.Raster("geo_shelf_rockyb_1km_v01.0.tif")
        proc = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc"
        gebco_2021_n18_0_s_42_0_w6_0_e80_0_tif = arcpy.Raster("gebco_2021_n18.0_s-42.0_w6.0_e80.0.tif")
        grid_1km_v01_1_tif = arcpy.Raster("ModelBuilder\\grid_1km_v01.1.tif")
        gebco_land_n_tif_gebco_land_n_tif = arcpy.Raster("ModelBuilder\\gebco_land_n.tif:gebco_land_n.tif")
        geo_shallow_rockyb_250m_v01_0_tif = arcpy.Raster("M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\geo_shallow_rockyb\\v01\\geo_shallow_rockyb_250m_v01.0.tif")
        proc_2_ = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc"
        dataset_u_2020_monthly_164733913609_tif = arcpy.Raster("dataset_u_2020_monthly_164733913609.tif")
        grid_1km_v01_1_tif_3_ = arcpy.Raster("ModelBuilder\\grid_1km_v01.1.tif")
        so2015v2_tif = arcpy.Raster("so2015v2.tif")
        Annual_rain_precipitation_wio_tif = arcpy.Raster("Annual-rain-precipitation-wio.tif")
        gebco_land_shelf_flow_accumulation_log10_symplify_n_tif_gebco_land_shelf_flow_accumulation_log10_symplify_n_tif = arcpy.Raster("ModelBuilder\\gebco_land_shelf_flow_accumulation_log10_symplify_n.tif:gebco_land_shelf_flow_accumulation_log10_symplify_n.tif")
        PhosphorusBalanceOnLandscape_140Crops_tif = arcpy.Raster("PhosphorusBalanceOnLandscape_140Crops.tif")
        gebco_land_n_tif_gebco_land_n_tif_2_ = arcpy.Raster("ModelBuilder\\gebco_land_n.tif:gebco_land_n.tif")
        gebco_bathymetry_n_tif_2_gebco_bathymetry_n_tif = arcpy.Raster("ModelBuilder\\gebco_bathymetry_n.tif (2):gebco_bathymetry_n.tif")
        geo_shallow_softb_1km_v01_0_tif_2_ = arcpy.Raster("geo_shallow_softb_1km_v01.0.tif")
        Intertidal_2002_2016_setnull_tif = arcpy.Raster("Intertidal_2002-2016_setnull.tif")
        proc_4_ = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc"
        dataset_v_2020_monthly_164733913609_tif = arcpy.Raster("dataset_v_2020_monthly_164733913609.tif")
        proc_3_ = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc"
        _2020_current_u_mean_extract_tif_2020_current_u_mean_tif = arcpy.Raster("ModelBuilder\\2020_current_u_mean_extract.tif:2020_current_u_mean.tif")
        grid_1km_v01_1_tif_4_ = arcpy.Raster("ModelBuilder\\grid_1km_v01.1.tif")
        Q_accumulated_volumn_of_runoff0_tif = arcpy.Raster("Q_accumulated_volumn_of_runoff0.tif")
        proc_6_ = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc"
        grid_1km_v01_1_tif_2_ = arcpy.Raster("ModelBuilder\\grid_1km_v01.1.tif")
        proc_5_ = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc"
        proc_7_ = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc"

        # Process: Mosaic To New Raster (Mosaic To New Raster) (management)
        with arcpy.EnvManager(pyramid="PYRAMIDS 9 NEAREST LZ77 75 NO_SKIP NO_SIPS", scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            shallow_shelf_zone_n_tif = arcpy.management.MosaicToNewRaster(input_rasters=[geo_shallow_softb_1km_v01_0_tif, geo_shelf_rockyb_1km_v01_0_tif], output_location=proc, raster_dataset_name_with_extension="shallow_shelf_zone_n.tif", coordinate_system_for_the_raster="", pixel_type="32_BIT_FLOAT", cellsize=None, number_of_bands=1, mosaic_method="LAST", mosaic_colormap_mode="FIRST")[0]
            shallow_shelf_zone_n_tif = arcpy.Raster(shallow_shelf_zone_n_tif)

        # Process: Reclassify (Reclassify) (sa)
        shallow_shelf_zone_polygon_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\shallow_shelf_zone_polygon_n.tif"
        Reclassify = shallow_shelf_zone_polygon_n_tif
        shallow_shelf_zone_polygon_n_tif = arcpy.sa.Reclassify(in_raster=shallow_shelf_zone_n_tif, reclass_field="VALUE", remap="0 100 1", missing_values="DATA")
        shallow_shelf_zone_polygon_n_tif.save(Reclassify)


        # Process: Raster to Polygon (Raster to Polygon) (conversion)
        shallow_shelf_zone_polygon_n_shp = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\shallow_shelf_zone_polygon_n.shp"
        with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
            arcpy.conversion.RasterToPolygon(in_raster=shallow_shelf_zone_polygon_n_tif, out_polygon_features=shallow_shelf_zone_polygon_n_shp, simplify="SIMPLIFY", raster_field="Value", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Dissolve (Dissolve) (management)
        shallow_shelf_zone_polygon_dissolve_n_shp = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\shallow_shelf_zone_polygon_dissolve_n.shp"
        arcpy.management.Dissolve(in_features=shallow_shelf_zone_polygon_n_shp, out_feature_class=shallow_shelf_zone_polygon_dissolve_n_shp, dissolve_field=[], statistics_fields=[], multi_part="MULTI_PART", unsplit_lines="DISSOLVE_LINES")

        # Process: Extract by Mask (Extract by Mask) (sa)
        gebco_bathymetry_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_bathymetry_n.tif"
        Extract_by_Mask = gebco_bathymetry_n_tif
        gebco_bathymetry_n_tif = arcpy.sa.ExtractByMask(in_raster=gebco_2021_n18_0_s_42_0_w6_0_e80_0_tif, in_mask_data=grid_1km_v01_1_tif)
        gebco_bathymetry_n_tif.save(Extract_by_Mask)


        # Process: Fill (Fill) (sa)
        gebco_hydro_fill_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_hydro_fill_n.tif"
        Fill = gebco_hydro_fill_n_tif
        gebco_hydro_fill_n_tif = arcpy.sa.Fill(in_surface_raster=gebco_bathymetry_n_tif, z_limit=None)
        gebco_hydro_fill_n_tif.save(Fill)


        # Process: Flow Direction (Flow Direction) (sa)
        gebco_hydro_flowdirection_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_hydro_flowdirection_n.tif"
        Flow_Direction = gebco_hydro_flowdirection_n_tif
        Output_drop_raster = ""
        gebco_hydro_flowdirection_n_tif = arcpy.sa.FlowDirection(in_surface_raster=gebco_hydro_fill_n_tif, force_flow="NORMAL", out_drop_raster=Output_drop_raster, flow_direction_type="D8")
        gebco_hydro_flowdirection_n_tif.save(Flow_Direction)


        # Process: Flow Accumulation (Flow Accumulation) (sa)
        gebco_hydro_flow_accumulation_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_hydro_flow_accumulation_n.tif"
        Flow_Accumulation = gebco_hydro_flow_accumulation_n_tif
        gebco_hydro_flow_accumulation_n_tif = arcpy.sa.FlowAccumulation(in_flow_direction_raster=gebco_hydro_flowdirection_n_tif, in_weight_raster="", data_type="FLOAT", flow_direction_type="D8")
        gebco_hydro_flow_accumulation_n_tif.save(Flow_Accumulation)


        # Process: Raster Calculator (Raster Calculator) (ia)
        gebco_hydro_flow_accumulation_log10_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_hydro_flow_accumulation_log10_n.tif"
        Raster_Calculator = gebco_hydro_flow_accumulation_log10_n_tif
        gebco_hydro_flow_accumulation_log10_n_tif = Log10(gebco_hydro_flow_accumulation_n_tif)
        gebco_hydro_flow_accumulation_log10_n_tif.save(Raster_Calculator)


        # Process: Raster Calculator (2) (Raster Calculator) (ia)
        gebco_hydro_flow_accumulation_log10_symplify_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_hydro_flow_accumulation_log10_symplify_n.tif"
        Raster_Calculator_2_ = gebco_hydro_flow_accumulation_log10_symplify_n_tif
        gebco_hydro_flow_accumulation_log10_symplify_n_tif =  Con(gebco_hydro_flow_accumulation_log10_n_tif>=2,  gebco_hydro_flow_accumulation_log10_n_tif)
        gebco_hydro_flow_accumulation_log10_symplify_n_tif.save(Raster_Calculator_2_)


        # Process: Extract by Mask (2) (Extract by Mask) (sa)
        gebco_land_n_extract_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_land_n_extract.tif"
        Extract_by_Mask_2_ = gebco_land_n_extract_tif
        gebco_land_n_extract_tif = arcpy.sa.ExtractByMask(in_raster=gebco_2021_n18_0_s_42_0_w6_0_e80_0_tif, in_mask_data=gebco_land_n_tif_gebco_land_n_tif)
        gebco_land_n_extract_tif.save(Extract_by_Mask_2_)


        # Process: Extract by Mask (3) (Extract by Mask) (sa)
        gebco_shallow_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_shallow.tif"
        Extract_by_Mask_3_ = gebco_shallow_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            gebco_shallow_tif = arcpy.sa.ExtractByMask(in_raster=gebco_2021_n18_0_s_42_0_w6_0_e80_0_tif, in_mask_data=geo_shallow_rockyb_250m_v01_0_tif)
            gebco_shallow_tif.save(Extract_by_Mask_3_)


        # Process: Mosaic To New Raster (2) (Mosaic To New Raster) (management)
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            gebco_land_and_shallow_zone_tif = arcpy.management.MosaicToNewRaster(input_rasters=[gebco_land_n_extract_tif, gebco_shallow_tif], output_location=proc_2_, raster_dataset_name_with_extension="gebco_land_and_shallow_zone.tif", coordinate_system_for_the_raster="PROJCS[\"WGS_1984_Cylindrical_Equal_Area\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Cylindrical_Equal_Area\"],PARAMETER[\"false_easting\",0.0],PARAMETER[\"false_northing\",0.0],PARAMETER[\"central_meridian\",12.0],PARAMETER[\"standard_parallel_1\",-12.0],UNIT[\"Meter\",1.0]]", pixel_type="32_BIT_FLOAT", cellsize=None, number_of_bands=1, mosaic_method="LAST", mosaic_colormap_mode="FIRST")[0]
            gebco_land_and_shallow_zone_tif = arcpy.Raster(gebco_land_and_shallow_zone_tif)

        # Process: Fill (2) (Fill) (sa)
        gebco_land_shallow_fill_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_land_shallow_fill_n.tif"
        Fill_2_ = gebco_land_shallow_fill_n_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            gebco_land_shallow_fill_n_tif = arcpy.sa.Fill(in_surface_raster=gebco_land_and_shallow_zone_tif, z_limit=None)
            gebco_land_shallow_fill_n_tif.save(Fill_2_)


        # Process: Flow Direction (2) (Flow Direction) (sa)
        gebco_land_shallow_fill_dir_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_land_shallow_fill_dir.tif"
        Flow_Direction_2_ = gebco_land_shallow_fill_dir_tif
        gebco_bathymetry_n_tif_2_ = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_bathymetry_n.tif"
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            gebco_land_shallow_fill_dir_tif = arcpy.sa.FlowDirection(in_surface_raster=gebco_land_shallow_fill_n_tif, force_flow="FORCE", out_drop_raster=gebco_bathymetry_n_tif_2_, flow_direction_type="D8")
            gebco_land_shallow_fill_dir_tif.save(Flow_Direction_2_)

            gebco_bathymetry_n_tif_2_ = arcpy.Raster(gebco_bathymetry_n_tif_2_)

        # Process: Cell Statistics (Cell Statistics) (sa)
        dataset_u_monthly_2020_cell_statistics_mean_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\dataset_u_monthly_2020_cell_statistics_mean.tif"
        Cell_Statistics = dataset_u_monthly_2020_cell_statistics_mean_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            dataset_u_monthly_2020_cell_statistics_mean_tif = arcpy.sa.CellStatistics(in_rasters_or_constants=[dataset_u_2020_monthly_164733913609_tif], statistics_type="MEAN", ignore_nodata="DATA", process_as_multiband="SINGLE_BAND")
            dataset_u_monthly_2020_cell_statistics_mean_tif.save(Cell_Statistics)


        # Process: Extract by Mask (4) (Extract by Mask) (sa)
        _2020_current_u_mean_extract_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\2020_current_u_mean_extract.tif"
        Extract_by_Mask_4_ = _2020_current_u_mean_extract_tif
        with arcpy.EnvManager(mask=r"ModelBuilder\grid_1km_v01.1.tif", outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]"):
            _2020_current_u_mean_extract_tif = arcpy.sa.ExtractByMask(in_raster=dataset_u_monthly_2020_cell_statistics_mean_tif, in_mask_data=grid_1km_v01_1_tif_3_)
            _2020_current_u_mean_extract_tif.save(Extract_by_Mask_4_)


        # Process: Slope (Slope) (sa)
        gebco_land_slope_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_land_slope.tif"
        Slope = gebco_land_slope_tif
        gebco_land_slope_tif = arcpy.sa.Slope(in_raster=gebco_land_n_extract_tif, output_measurement="DEGREE", z_factor=1, method="GEODESIC", z_unit="METER")
        gebco_land_slope_tif.save(Slope)


        # Process: Reclassify (2) (Reclassify) (sa)
        gebco_land_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_land_n.tif"
        Reclassify_2_ = gebco_land_n_tif
        gebco_land_n_tif = arcpy.sa.Reclassify(in_raster=gebco_2021_n18_0_s_42_0_w6_0_e80_0_tif, reclass_field="Value", remap="-7473 0 NODATA;0 5810 1", missing_values="DATA")
        gebco_land_n_tif.save(Reclassify_2_)


        # Process: Extract by Mask (6) (Extract by Mask) (sa)
        soil_map_africa_land_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\soil_map_africa_land.tif"
        Extract_by_Mask_6_ = soil_map_africa_land_tif
        soil_map_africa_land_tif = arcpy.sa.ExtractByMask(in_raster=so2015v2_tif, in_mask_data=gebco_land_n_tif)
        soil_map_africa_land_tif.save(Extract_by_Mask_6_)


        # Process: Raster to Polygon (2) (Raster to Polygon) (conversion)
        soil_land_polygon1_shp = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\soil_land_polygon1.shp"
        with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
            arcpy.conversion.RasterToPolygon(in_raster=soil_map_africa_land_tif, out_polygon_features=soil_land_polygon1_shp, simplify="SIMPLIFY", raster_field="VALUE", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Raster to Point (Raster to Point) (conversion)
        Flow_accumulation_points_shp = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\Flow_accumulation_points.shp"
        arcpy.conversion.RasterToPoint(in_raster=gebco_land_shelf_flow_accumulation_log10_symplify_n_tif_gebco_land_shelf_flow_accumulation_log10_symplify_n_tif, out_point_features=Flow_accumulation_points_shp, raster_field="Value")

        # Process: Extract by Mask (7) (Extract by Mask) (sa)
        phosphorus_wio_extract_kg1_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\phosphorus_wio_extract_kg1.tif"
        Extract_by_Mask_7_ = phosphorus_wio_extract_kg1_tif
        phosphorus_wio_extract_kg1_tif = arcpy.sa.ExtractByMask(in_raster=PhosphorusBalanceOnLandscape_140Crops_tif, in_mask_data=gebco_land_n_tif_gebco_land_n_tif_2_)
        phosphorus_wio_extract_kg1_tif.save(Extract_by_Mask_7_)


        # Process: Raster Calculator (10) (Raster Calculator) (ia)
        phosphorus_wio_extract_kg1_dividedby100_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\phosphorus_wio_extract_kg1_dividedby100.tif"
        Raster_Calculator_10_ = phosphorus_wio_extract_kg1_dividedby100_tif
        phosphorus_wio_extract_kg1_dividedby100_tif =  phosphorus_wio_extract_kg1_tif /100
        phosphorus_wio_extract_kg1_dividedby100_tif.save(Raster_Calculator_10_)


        # Process: Reclassify (3) (Reclassify) (sa)
        HSB_group_reclassify_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\HSB_group_reclassify.tif"
        Reclassify_3_ = HSB_group_reclassify_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            HSB_group_reclassify_tif = arcpy.sa.Reclassify(in_raster="", reclass_field="", remap="1 1;2 2;3 3;4 4;13 NODATA", missing_values="DATA")
            HSB_group_reclassify_tif.save(Reclassify_3_)


        # Process: Flow Accumulation (2) (Flow Accumulation) (sa)
        gebco_land_shallow_fill_dir_accum_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_land_shallow_fill_dir_accum_n.tif"
        Flow_Accumulation_2_ = gebco_land_shallow_fill_dir_accum_n_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            gebco_land_shallow_fill_dir_accum_n_tif = arcpy.sa.FlowAccumulation(in_flow_direction_raster=gebco_land_shallow_fill_dir_tif, in_weight_raster=gebco_bathymetry_n_tif_2_gebco_bathymetry_n_tif, data_type="FLOAT", flow_direction_type="D8")
            gebco_land_shallow_fill_dir_accum_n_tif.save(Flow_Accumulation_2_)


        # Process: Extract by Mask (8) (Extract by Mask) (sa)
        flow_accumulation_connecting_shallow_zone_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\flow_accumulation_connecting_shallow_zone.tif"
        Extract_by_Mask_8_ = flow_accumulation_connecting_shallow_zone_tif
        flow_accumulation_connecting_shallow_zone_tif = arcpy.sa.ExtractByMask(in_raster=gebco_land_shallow_fill_dir_accum_n_tif, in_mask_data=geo_shallow_softb_1km_v01_0_tif_2_)
        flow_accumulation_connecting_shallow_zone_tif.save(Extract_by_Mask_8_)


        # Process: Extract by Mask (9) (Extract by Mask) (sa)
        extract_intertidal_flow_acc_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\extract_intertidal_flow_acc.tif"
        Extract_by_Mask_9_ = extract_intertidal_flow_acc_tif
        extract_intertidal_flow_acc_tif = arcpy.sa.ExtractByMask(in_raster=gebco_land_shallow_fill_dir_accum_n_tif, in_mask_data=Intertidal_2002_2016_setnull_tif)
        extract_intertidal_flow_acc_tif.save(Extract_by_Mask_9_)


        # Process: Mosaic To New Raster (5) (Mosaic To New Raster) (management)
        Flow_accumulation_connecting_shallow_intertid_tif = arcpy.management.MosaicToNewRaster(input_rasters=[flow_accumulation_connecting_shallow_zone_tif, extract_intertidal_flow_acc_tif], output_location=proc_4_, raster_dataset_name_with_extension="Flow_accumulation_connecting_shallow_intertid.tif", coordinate_system_for_the_raster="", pixel_type="32_BIT_FLOAT", cellsize=None, number_of_bands=1, mosaic_method="LAST", mosaic_colormap_mode="FIRST")[0]
        Flow_accumulation_connecting_shallow_intertid_tif = arcpy.Raster(Flow_accumulation_connecting_shallow_intertid_tif)

        # Process: Raster to Point (2) (Raster to Point) (conversion)
        Flow_accumulation_points_connecting_zone_shp = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\Flow_accumulation_points_connecting_zone.shp"
        arcpy.conversion.RasterToPoint(in_raster=Flow_accumulation_connecting_shallow_intertid_tif, out_point_features=Flow_accumulation_points_connecting_zone_shp, raster_field="Value")

        # Process: Raster to Point (3) (Raster to Point) (conversion)
        Flow_accumulation_points_intertidal_zone_shp = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\Flow_accumulation_points_intertidal_zone.shp"
        arcpy.conversion.RasterToPoint(in_raster=extract_intertidal_flow_acc_tif, out_point_features=Flow_accumulation_points_intertidal_zone_shp, raster_field="Value")

        # Process: Cell Statistics (2) (Cell Statistics) (sa)
        dataset_v_monthly_2020_cell_statistics_mean_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\dataset_v_monthly_2020_cell_statistics_mean.tif"
        Cell_Statistics_2_ = dataset_v_monthly_2020_cell_statistics_mean_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            dataset_v_monthly_2020_cell_statistics_mean_tif = arcpy.sa.CellStatistics(in_rasters_or_constants=[dataset_v_2020_monthly_164733913609_tif], statistics_type="MEAN", ignore_nodata="DATA", process_as_multiband="SINGLE_BAND")
            dataset_v_monthly_2020_cell_statistics_mean_tif.save(Cell_Statistics_2_)


        # Process: Extract by Mask (5) (Extract by Mask) (sa)
        _2020_v_current_v_mean_extract_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\2020_v_current_v_mean_extract.tif"
        Extract_by_Mask_5_ = _2020_v_current_v_mean_extract_tif
        with arcpy.EnvManager(mask=r"ModelBuilder\grid_1km_v01.1.tif", outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]"):
            _2020_v_current_v_mean_extract_tif = arcpy.sa.ExtractByMask(in_raster=dataset_v_monthly_2020_cell_statistics_mean_tif, in_mask_data=grid_1km_v01_1_tif_3_)
            _2020_v_current_v_mean_extract_tif.save(Extract_by_Mask_5_)


        # Process: Raster Calculator (7) (Raster Calculator) (ia)
        _2020_current_u_mean_extract_u_southward_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\2020_current_u_mean_extract_u_southward.tif"
        Raster_Calculator_7_ = _2020_current_u_mean_extract_u_southward_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            _2020_current_u_mean_extract_u_southward_tif =  Con(_2020_v_current_v_mean_extract_tif<0,  _2020_v_current_v_mean_extract_tif)* (-1)
            _2020_current_u_mean_extract_u_southward_tif.save(Raster_Calculator_7_)


        # Process: Raster Calculator (8) (Raster Calculator) (ia)
        _2020_current_u_mean_extract_u_northward_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\2020_current_u_mean_extract_u_northward.tif"
        Raster_Calculator_8_ = _2020_current_u_mean_extract_u_northward_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            _2020_current_u_mean_extract_u_northward_tif =  Con(_2020_v_current_v_mean_extract_tif>0,  _2020_v_current_v_mean_extract_tif)
            _2020_current_u_mean_extract_u_northward_tif.save(Raster_Calculator_8_)


        # Process: Mosaic To New Raster (4) (Mosaic To New Raster) (management)
        with arcpy.EnvManager(nodata="MAP_UP", pyramid="PYRAMIDS 5 NEAREST LZ77 75 NO_SKIP NO_SIPS", scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", 
                              workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            _2020_geostrophic_velocity_meridion_v_north_south_tif = arcpy.management.MosaicToNewRaster(input_rasters=[_2020_current_u_mean_extract_u_southward_tif, _2020_current_u_mean_extract_u_northward_tif], output_location=proc_3_, raster_dataset_name_with_extension="2020_geostrophic_velocity_meridion_v_north_south.tif", coordinate_system_for_the_raster="PROJCS[\"WGS_1984_Cylindrical_Equal_Area\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Cylindrical_Equal_Area\"],PARAMETER[\"false_easting\",0.0],PARAMETER[\"false_northing\",0.0],PARAMETER[\"central_meridian\",12.0],PARAMETER[\"standard_parallel_1\",-12.0],UNIT[\"Meter\",1.0]]", pixel_type="32_BIT_FLOAT", cellsize=None, number_of_bands=1, mosaic_method="SUM", mosaic_colormap_mode="REJECT")[0]
            _2020_geostrophic_velocity_meridion_v_north_south_tif = arcpy.Raster(_2020_geostrophic_velocity_meridion_v_north_south_tif)

        # Process: Raster Calculator (6) (Raster Calculator) (ia)
        _2020_current_u_mean_extract_u_eastward_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\2020_current_u_mean_extract_u_eastward.tif"
        Raster_Calculator_6_ = _2020_current_u_mean_extract_u_eastward_tif
        _2020_current_u_mean_extract_u_eastward_tif =  Con(_2020_current_u_mean_extract_tif_2020_current_u_mean_tif>0,  _2020_current_u_mean_extract_tif_2020_current_u_mean_tif)
        _2020_current_u_mean_extract_u_eastward_tif.save(Raster_Calculator_6_)


        # Process: Raster Calculator (5) (Raster Calculator) (ia)
        _2020_current_u_mean_extract_u_westward_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\2020_current_u_mean_extract_u_westward.tif"
        Raster_Calculator_5_ = _2020_current_u_mean_extract_u_westward_tif
        _2020_current_u_mean_extract_u_westward_tif =  Con(_2020_current_u_mean_extract_tif_2020_current_u_mean_tif<0,  _2020_current_u_mean_extract_tif_2020_current_u_mean_tif)* (-1)
        _2020_current_u_mean_extract_u_westward_tif.save(Raster_Calculator_5_)


        # Process: Mosaic To New Raster (3) (Mosaic To New Raster) (management)
        with arcpy.EnvManager(nodata="MAP_DOWN", pyramid="PYRAMIDS 5 NEAREST LZ77 75 NO_SKIP NO_SIPS"):
            _2020_geostrophic_velocity_zonal_u_east_west_tif = arcpy.management.MosaicToNewRaster(input_rasters=[_2020_current_u_mean_extract_u_eastward_tif, _2020_current_u_mean_extract_u_westward_tif], output_location=proc_3_, raster_dataset_name_with_extension="2020_geostrophic_velocity_zonal_u_east_west.tif", coordinate_system_for_the_raster="PROJCS[\"WGS_1984_Cylindrical_Equal_Area\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Cylindrical_Equal_Area\"],PARAMETER[\"false_easting\",0.0],PARAMETER[\"false_northing\",0.0],PARAMETER[\"central_meridian\",12.0],PARAMETER[\"standard_parallel_1\",-12.0],UNIT[\"Meter\",1.0]]", pixel_type="32_BIT_FLOAT", cellsize=None, number_of_bands=1, mosaic_method="SUM", mosaic_colormap_mode="REJECT")[0]
            _2020_geostrophic_velocity_zonal_u_east_west_tif = arcpy.Raster(_2020_geostrophic_velocity_zonal_u_east_west_tif)

        # Process: Raster Calculator (9) (Raster Calculator) (sa)
        geostrophic_velocity_totalmean_2020_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\geostrophic_velocity_totalmean_2020.tif"
        Raster_Calculator_9_ = geostrophic_velocity_totalmean_2020_tif
        geostrophic_velocity_totalmean_2020_tif =   _2020_geostrophic_velocity_meridion_v_north_south_tif +  _2020_geostrophic_velocity_zonal_u_east_west_tif
        geostrophic_velocity_totalmean_2020_tif.save(Raster_Calculator_9_)


        # Process: Focal Statistics (2) (Focal Statistics) (ia)
        _2020_curret_velocity_mean_total_focal_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\2020_curret_velocity_mean_total_focal.tif"
        Focal_Statistics_2_ = _2020_curret_velocity_mean_total_focal_tif
        with arcpy.EnvManager(cellSize=r"M:\proj\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", mask=r"ModelBuilder\grid_1km_v01.1.tif", snapRaster=r"ModelBuilder\grid_1km_v01.1.tif"):
            _2020_curret_velocity_mean_total_focal_tif = arcpy.ia.FocalStatistics(in_raster=geostrophic_velocity_totalmean_2020_tif, neighborhood="Wedge 10 0 360 CELL", statistics_type="SUM", ignore_nodata="DATA", percentile_value=90)
            _2020_curret_velocity_mean_total_focal_tif.save(Focal_Statistics_2_)


        # Process: Extract by Mask (11) (Extract by Mask) (sa)
        v1_2020_total_mean_velocity_grid_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\v1_2020_total_mean_velocity_grid.tif"
        Extract_by_Mask_11_ = v1_2020_total_mean_velocity_grid_tif
        with arcpy.EnvManager(cellSize=r"M:\proj\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", mask=r"ModelBuilder\grid_1km_v01.1.tif", outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]", 
                              scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", snapRaster=r"ModelBuilder\grid_1km_v01.1.tif", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_2020_total_mean_velocity_grid_tif = arcpy.sa.ExtractByMask(in_raster=_2020_curret_velocity_mean_total_focal_tif, in_mask_data=grid_1km_v01_1_tif_4_)
            v1_2020_total_mean_velocity_grid_tif.save(Extract_by_Mask_11_)


        # Process: Raster Calculator (13) (Raster Calculator) (ia)
        v1_2020_total_mean_velocity_grid_reverse_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\v1_2020_total_mean_velocity_grid_reverse.tif"
        Raster_Calculator_13_ = v1_2020_total_mean_velocity_grid_reverse_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_2020_total_mean_velocity_grid_reverse_tif =  v1_2020_total_mean_velocity_grid_tif *(-1)
            v1_2020_total_mean_velocity_grid_reverse_tif.save(Raster_Calculator_13_)


        # Process: Raster Calculator (12) (Raster Calculator) (ia)
        v1_total_mean_velocity_grid_norm_reverse_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\v1_total_mean_velocity_grid_norm_reverse.tif"
        Raster_Calculator_12_ = v1_total_mean_velocity_grid_norm_reverse_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_total_mean_velocity_grid_norm_reverse_tif = ((v1_2020_total_mean_velocity_grid_reverse_tif-v1_2020_total_mean_velocity_grid_reverse_tif.minimum)/(v1_2020_total_mean_velocity_grid_reverse_tif.maximum-v1_2020_total_mean_velocity_grid_reverse_tif.minimum))*(100)
            v1_total_mean_velocity_grid_norm_reverse_tif.save(Raster_Calculator_12_)


        # Process: Raster Calculator (3) (Raster Calculator) (ia)
        gebco_land_shallow_flow_accumulation_log10_n_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\gebco_land_shallow_flow_accumulation_log10_n.tif"
        Raster_Calculator_3_ = gebco_land_shallow_flow_accumulation_log10_n_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            gebco_land_shallow_flow_accumulation_log10_n_tif = Log10(gebco_land_shallow_fill_dir_accum_n_tif)
            gebco_land_shallow_flow_accumulation_log10_n_tif.save(Raster_Calculator_3_)


        # Process: Project Raster (Project Raster) (management)
        gebco_land_shallow_flow_accu = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\pres\\Nutrient_input\\v01\\proc\\nutrient_input_proj\\Default.gdb\\gebco_land_shallow_flow_accu"
        with arcpy.EnvManager(cellSize=r"M:\proj\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", snapRaster=r"ModelBuilder\grid_1km_v01.1.tif"):
            arcpy.management.ProjectRaster(in_raster=gebco_land_shallow_flow_accumulation_log10_n_tif, out_raster=gebco_land_shallow_flow_accu, out_coor_system="PROJCS[\"WGS_1984_Cylindrical_Equal_Area\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Cylindrical_Equal_Area\"],PARAMETER[\"false_easting\",0.0],PARAMETER[\"false_northing\",0.0],PARAMETER[\"central_meridian\",12.0],PARAMETER[\"standard_parallel_1\",-12.0],UNIT[\"Meter\",1.0]]", resampling_type="NEAREST", cell_size="447,11160205598 447,11160205598", geographic_transform=[], Registration_Point="", in_coor_system="PROJCS[\"WGS_1984_Cylindrical_Equal_Area\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Cylindrical_Equal_Area\"],PARAMETER[\"false_easting\",0.0],PARAMETER[\"false_northing\",0.0],PARAMETER[\"central_meridian\",12.0],PARAMETER[\"standard_parallel_1\",-12.0],UNIT[\"Meter\",1.0]]", vertical="NO_VERTICAL")
            gebco_land_shallow_flow_accu = arcpy.Raster(gebco_land_shallow_flow_accu)

        # Process: Focal Statistics (Focal Statistics) (ia)
        flow_accumulation_focal_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\flow_accumulation_focal.tif"
        Focal_Statistics = flow_accumulation_focal_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            flow_accumulation_focal_tif = arcpy.ia.FocalStatistics(in_raster=gebco_land_shallow_flow_accu, neighborhood="Wedge 10 0 360 CELL", statistics_type="SUM", ignore_nodata="DATA", percentile_value=90)
            flow_accumulation_focal_tif.save(Focal_Statistics)


        # Process: Extract by Mask (10) (Extract by Mask) (sa)
        v1_flow_acc_focal_extract_grid1_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\v1_flow_acc_focal_extract_grid1.tif"
        Extract_by_Mask_10_ = v1_flow_acc_focal_extract_grid1_tif
        with arcpy.EnvManager(cellSize=r"M:\proj\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", mask=r"ModelBuilder\grid_1km_v01.1.tif", outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]", 
                              scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", snapRaster=r"ModelBuilder\grid_1km_v01.1.tif", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_flow_acc_focal_extract_grid1_tif = arcpy.sa.ExtractByMask(in_raster=flow_accumulation_focal_tif, in_mask_data=grid_1km_v01_1_tif_4_)
            v1_flow_acc_focal_extract_grid1_tif.save(Extract_by_Mask_10_)


        # Process: Raster Calculator (4) (Raster Calculator) (ia)
        v1_flow_acc_extract_grid_norm_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\v1_flow_acc_extract_grid_norm.tif"
        Raster_Calculator_4_ = v1_flow_acc_extract_grid_norm_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_flow_acc_extract_grid_norm_tif = ((v1_flow_acc_focal_extract_grid1_tif- v1_flow_acc_focal_extract_grid1_tif.minimum)/(v1_flow_acc_focal_extract_grid1_tif.maximum-v1_flow_acc_focal_extract_grid1_tif.minimum))*100
            v1_flow_acc_extract_grid_norm_tif.save(Raster_Calculator_4_)


        # Process: Weighted Sum (Weighted Sum) (ia)
        v1_hydro_landbase_current_proxy_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\v1_hydro_landbase_current_proxy.tif"
        Weighted_Sum = v1_hydro_landbase_current_proxy_tif
        with arcpy.EnvManager(cellSize=r"M:\proj\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", extent="-286431,668601965 -5530915,59247901 6120763,76759421 2451634,99572926", mask=r"ModelBuilder\grid_1km_v01.1.tif", 
                              outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]", snapRaster=r"ModelBuilder\grid_1km_v01.1.tif"):
            v1_hydro_landbase_current_proxy_tif = arcpy.ia.WeightedSum(in_rasters=[[v1_total_mean_velocity_grid_norm_reverse_tif, "VALUE", 1], [v1_flow_acc_extract_grid_norm_tif, "VALUE", 3]])
            v1_hydro_landbase_current_proxy_tif.save(Weighted_Sum)


        # Process: Mosaic To New Raster (7) (Mosaic To New Raster) (management)
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            Q_volumn_runoff_combine_grid_tif = arcpy.management.MosaicToNewRaster(input_rasters=[grid_1km_v01_1_tif_3_, Q_accumulated_volumn_of_runoff0_tif], output_location=proc_6_, raster_dataset_name_with_extension="Q_volumn_runoff_combine_grid.tif", coordinate_system_for_the_raster="PROJCS[\"WGS_1984_Cylindrical_Equal_Area\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Cylindrical_Equal_Area\"],PARAMETER[\"false_easting\",0.0],PARAMETER[\"false_northing\",0.0],PARAMETER[\"central_meridian\",12.0],PARAMETER[\"standard_parallel_1\",-12.0],UNIT[\"Meter\",1.0]]", pixel_type="32_BIT_SIGNED", cellsize=None, number_of_bands=1, mosaic_method="SUM", mosaic_colormap_mode="FIRST")[0]
            Q_volumn_runoff_combine_grid_tif = arcpy.Raster(Q_volumn_runoff_combine_grid_tif)

        # Process: Focal Statistics (3) (Focal Statistics) (ia)
        Q_accumulated_volumn_of_runoff_focal_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\Q_accumulated_volumn_of_runoff_focal.tif"
        Focal_Statistics_3_ = Q_accumulated_volumn_of_runoff_focal_tif
        Q_accumulated_volumn_of_runoff_focal_tif = arcpy.ia.FocalStatistics(in_raster=Q_volumn_runoff_combine_grid_tif, neighborhood="Wedge 10 0 360 CELL", statistics_type="SUM", ignore_nodata="DATA", percentile_value=90)
        Q_accumulated_volumn_of_runoff_focal_tif.save(Focal_Statistics_3_)


        # Process: Extract by Mask (12) (Extract by Mask) (sa)
        v1_accumulate_volumn_runoff_grid_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\v1_accumulate volumn_runoff_grid.tif"
        Extract_by_Mask_12_ = v1_accumulate_volumn_runoff_grid_tif
        with arcpy.EnvManager(cellSize=r"M:\proj\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", mask=r"ModelBuilder\grid_1km_v01.1.tif", outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]", 
                              scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", snapRaster=r"ModelBuilder\grid_1km_v01.1.tif", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_accumulate_volumn_runoff_grid_tif = arcpy.sa.ExtractByMask(in_raster=Q_accumulated_volumn_of_runoff_focal_tif, in_mask_data=grid_1km_v01_1_tif_2_)
            v1_accumulate_volumn_runoff_grid_tif.save(Extract_by_Mask_12_)


        # Process: Raster Calculator (11) (Raster Calculator) (ia)
        v1_accumulate_volumn_runoff_grid_norm_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\v1_accumulate volumn_runoff_grid_norm.tif"
        Raster_Calculator_11_ = v1_accumulate_volumn_runoff_grid_norm_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_accumulate_volumn_runoff_grid_norm_tif = ((v1_accumulate_volumn_runoff_grid_tif- v1_accumulate_volumn_runoff_grid_tif.minimum)/(v1_accumulate_volumn_runoff_grid_tif.maximum-v1_accumulate_volumn_runoff_grid_tif.minimum))*100
            v1_accumulate_volumn_runoff_grid_norm_tif.save(Raster_Calculator_11_)


        # Process: Raster Calculator (14) (Raster Calculator) (ia)
        v1_volumn_runoff_norm_int_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\v1_volumn_runoff_norm_int.tif"
        Raster_Calculator_14_ = v1_volumn_runoff_norm_int_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_volumn_runoff_norm_int_tif =  Int(v1_accumulate_volumn_runoff_grid_norm_tif)
            v1_volumn_runoff_norm_int_tif.save(Raster_Calculator_14_)


        # Process: Raster Calculator (15) (Raster Calculator) (ia)
        v1_total_mean_velocity_norm_int_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\v1_total_mean_velocity_norm_int.tif"
        Raster_Calculator_15_ = v1_total_mean_velocity_norm_int_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_total_mean_velocity_norm_int_tif =  Int( v1_total_mean_velocity_grid_norm_reverse_tif)
            v1_total_mean_velocity_norm_int_tif.save(Raster_Calculator_15_)


        # Process: Mosaic To New Raster (6) (Mosaic To New Raster) (management)
        with arcpy.EnvManager(pyramid="PYRAMIDS -1 NEAREST LZ77 75 NO_SKIP NO_SIPS"):
            v1_flow_grid_norm_combine_grid_tif = arcpy.management.MosaicToNewRaster(input_rasters=[v1_flow_acc_extract_grid_norm_tif, grid_1km_v01_1_tif_2_], output_location=proc_7_, raster_dataset_name_with_extension="v1_flow_grid_norm_combine_grid.tif", coordinate_system_for_the_raster="", pixel_type="32_BIT_SIGNED", cellsize=1000, number_of_bands=1, mosaic_method="FIRST", mosaic_colormap_mode="LAST")[0]
            v1_flow_grid_norm_combine_grid_tif = arcpy.Raster(v1_flow_grid_norm_combine_grid_tif)

        # Process: Extract by Mask (13) (Extract by Mask) (sa)
        v1_flow_acc_mask_norm_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\v1_flow_acc_mask_norm_.tif"
        Extract_by_Mask_13_ = v1_flow_acc_mask_norm_tif
        with arcpy.EnvManager(cellSize=r"M:\proj\marin\swoc\work\wiosym\data\reg\grid\grid\v01\grid_1km_v01.1.tif", mask=r"ModelBuilder\grid_1km_v01.1.tif", outputCoordinateSystem="PROJCS["WGS_1984_Cylindrical_Equal_Area",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Cylindrical_Equal_Area"],PARAMETER["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",12.0],PARAMETER["standard_parallel_1",-12.0],UNIT["Meter",1.0]]", 
                              scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", snapRaster=r"ModelBuilder\grid_1km_v01.1.tif", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            v1_flow_acc_mask_norm_tif = arcpy.sa.ExtractByMask(in_raster=v1_flow_grid_norm_combine_grid_tif, in_mask_data=grid_1km_v01_1_tif_4_)
            v1_flow_acc_mask_norm_tif.save(Extract_by_Mask_13_)


        # Process: Raster Calculator (16) (Raster Calculator) (sa)
        v1_flow_acc_pres_norm_int_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\v1_flow_acc_pres_norm_int.tif"
        Raster_Calculator_16_ = v1_flow_acc_pres_norm_int_tif
        v1_flow_acc_pres_norm_int_tif = Int(v1_flow_acc_mask_norm_tif)
        v1_flow_acc_pres_norm_int_tif.save(Raster_Calculator_16_)


if __name__ == '__main__':
    landbase_pres_hydrology()
