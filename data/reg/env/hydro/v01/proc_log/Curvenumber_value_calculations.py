# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2022-06-17 12:21:41
"""
import arcpy
from arcpy.ia import *
from arcpy.sa import *
from arcpy.sa import *
from arcpy.sa import *

def Curvenumber_value_calculations():  # Curvenumber_value_calculations

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")

    # Model Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
        WIO_precipitation_mean_mm_tif = arcpy.Raster("WIO_precipitation_mean_mm.tif")
        gebco_land_n_tif_gebco_land_n_tif = arcpy.Raster("ModelBuilder\\gebco_land_n.tif:gebco_land_n.tif")
        GCN250_ARCII_average_tif = arcpy.Raster("GCN250_ARCII_average.tif")

        # Process: Extract by Mask (2) (Extract by Mask) (sa)
        P_Wio_symphony_rain_mm_land_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\P_Wio_symphony_rain_mm_land.tif"
        Extract_by_Mask_2_ = P_Wio_symphony_rain_mm_land_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            P_Wio_symphony_rain_mm_land_tif = arcpy.sa.ExtractByMask(in_raster=WIO_precipitation_mean_mm_tif, in_mask_data=gebco_land_n_tif_gebco_land_n_tif)
            P_Wio_symphony_rain_mm_land_tif.save(Extract_by_Mask_2_)


        # Process: Extract by Mask (Extract by Mask) (sa)
        GCN_ARCII_WIO_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\GCN_ARCII_WIO.tif"
        Extract_by_Mask = GCN_ARCII_WIO_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            GCN_ARCII_WIO_tif = arcpy.sa.ExtractByMask(in_raster=GCN250_ARCII_average_tif, in_mask_data=gebco_land_n_tif_gebco_land_n_tif)
            GCN_ARCII_WIO_tif.save(Extract_by_Mask)


        # Process: Raster Calculator (Raster Calculator) (ia)
        S_value_potential_maximum_retention_afterRunoff_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\S_value_potential maximum_retention_afterRunoff.tif"
        Raster_Calculator = S_value_potential_maximum_retention_afterRunoff_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            S_value_potential_maximum_retention_afterRunoff_tif =  (1000/GCN_ARCII_WIO_tif) -10
            S_value_potential_maximum_retention_afterRunoff_tif.save(Raster_Calculator)


        # Process: Raster Calculator (2) (Raster Calculator) (sa)
        I_initial_quantity_of_interception_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\I_initial_quantity_of_interception.tif"
        Raster_Calculator_2_ = I_initial_quantity_of_interception_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            I_initial_quantity_of_interception_tif =  (S_value_potential_maximum_retention_afterRunoff_tif)*0.2
            I_initial_quantity_of_interception_tif.save(Raster_Calculator_2_)


        # Process: Raster Calculator (3) (Raster Calculator) (sa)
        _p_i_p_i_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\(p-i)(p-i).tif"
        Raster_Calculator_3_ = _p_i_p_i_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            _p_i_p_i_tif =  (P_Wio_symphony_rain_mm_land_tif - I_initial_quantity_of_interception_tif)*( P_Wio_symphony_rain_mm_land_tif- I_initial_quantity_of_interception_tif)
            _p_i_p_i_tif.save(Raster_Calculator_3_)


        # Process: Raster Calculator (4) (Raster Calculator) (sa)
        Q_accumulated_volumn_of_runoff0_tif = "M:\\proj\\marin\\swoc\\work\\wiosym\\data\\reg\\env\\hydro\\v01\\proc\\Q_accumulated_volumn_of_runoff.tif\\Q_accumulated_volumn_of_runoff0.tif"
        Raster_Calculator_4_ = Q_accumulated_volumn_of_runoff0_tif
        with arcpy.EnvManager(scratchWorkspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb", workspace=r"M:\proj\marin\swoc\work\wiosym\data\reg\pres\Nutrient_input\v01\proc\nutrient_input_proj\Default.gdb"):
            Q_accumulated_volumn_of_runoff0_tif =  _p_i_p_i_tif /(( P_Wio_symphony_rain_mm_land_tif - I_initial_quantity_of_interception_tif)+ S_value_potential_maximum_retention_afterRunoff_tif)
            Q_accumulated_volumn_of_runoff0_tif.save(Raster_Calculator_4_)


if __name__ == '__main__':
    Curvenumber_value_calculations()
